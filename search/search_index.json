{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Preface","text":"<p>In the past years, I have maintained several starter boilerplate projects for Jakarta EE developers, including:</p> <ul> <li>Jakarta EE 8 Starter Boilerplate</li> <li>Jakarta EE 9 Starter Boilerplate </li> <li>Jakarta EE 9 Servlet Starter Boilerplate(only for Servlet containers, such as Jetty, Apache Tomcat). </li> </ul> <p>With these starter boilerplate projects, it is easy to start a new Jakarta EE project with SDLC/DevOps support. </p> <p>Jakarta EE 10 was released for a few months, the most popular application servers, such as GlassFish v7, WildFly 27/28.x, OpenLiberty 23.0.0.4, etc. have been aligned with the newest Jakarta EE 10 specification. I think it is time to update the existing Jakarta EE 9 Starter Boilerplate, and provide an update for Jakarta EE 10.</p> <p>The new Jakarta EE 10 Starter Boilerplate project is hosted on Github.</p> <p>The initial work of this new Jakarta EE 10 Starter Boilerplate is already configured for three most popular open-source application servers: </p> <ul> <li>Eclipse GlassFish</li> <li>WildFly</li> <li>OpenLiberty</li> </ul> <p>Others, such as Apache TomEE, etc. will be updated in future when it is updated to Jakarta EE 10.</p>"},{"location":"build/","title":"Building and Running Application","text":"<p>In the docs of Jakarta EE 9 starter boilerplate, it introduced how to deploy to GlassFish, Payara, OpenLiberty servers, including managed and running servers(remote). </p> <p>In this Jakarta EE 10 Starter Boilerplate, we just includes simple deploy and run the sample application on local managed servers, it is every common in the development stage.</p>"},{"location":"build/#glassfish","title":"Glassfish","text":"<p>We usually use cargo maven plugin to run a Jakarta EE project on GlassFish, because there is no official maven plugin for it.</p> <p>Run the following command to build and deploy to a GlassFish server.</p> <pre><code>mvn clean package cargo:run -Pglassfish\n</code></pre>"},{"location":"build/#wildfly","title":"WildFly","text":"<p>WildFly project itself provides a great maven plugin to deploy Jakarta EE application to an embedded server, an existing server, or a running server.</p> <p>Run the following command to deploy the application to a WildFly server.</p> <pre><code>mvn clean wildfly:run -Pwildfly\n</code></pre>"},{"location":"build/#openliberty","title":"OpenLiberty","text":"<p>Simply run the following command to run the application on an OpenLiberty server.</p> <pre><code>mvn clean liberty:run -Popenliberty\n</code></pre>"},{"location":"cloud/","title":"Putting Application to Cloud","text":""},{"location":"gs/","title":"Getting Started","text":"<p>I will explore the file structure of this project and guide you to run it on your local machine.</p>"},{"location":"gs/explore/","title":"Exploring Project Structure","text":"<p>The Jakarta EE 10 Starter Boilerplate contains a collection of example codes to demonstrate the basic of Jakarta EE specifications, such as JPA, JMS, CDI, EJB, Restful APIs, Faces, etc. </p>"},{"location":"gs/explore/#getting-sources-codes","title":"Getting Sources Codes","text":"<p>Open a terminal, run the following command to get a copy of the starter codes.</p> <pre><code>git clone https://github.com/hantsy/jakartaee10-starter-boilerplate\n</code></pre>"},{"location":"gs/explore/#exploring-file-structure","title":"Exploring File Structure","text":"<p>Import the source codes into IDE, the following picture is the project file structure after imported into the IDEA.</p> <p></p> <ol> <li>It is a Maven project, so in the root there is a pom.xml to manage Maven build lifecycle.</li> <li> <p>Under the main/src/java folder, expand the package <code>com.example.demo</code>, it contains several subpackages.</p> <ul> <li><code>ejb</code> is an example of Stateless EJB to perform database CRUD operations. NOTE: EJB is be deprecated in the further Jakarta EE.</li> <li><code>cdi</code> is to replace the <code>ejb</code> functionality, the codes are rewritten in regular CDI beans.</li> <li><code>domain</code> contains a simple <code>Todo</code> JPA Entity and some helper classes.</li> <li><code>web</code> includes Faces backing beans example.</li> <li><code>rest</code> includes Restful API example.</li> <li><code>jms</code> contains a simple JMS example.</li> </ul> </li> <li> <p>Under the test folder, it contains testing codes and resources to run Arquillian tests.</p> </li> <li>Under the .github/workflows, there are several Github actions workflow config to build the project and run tests against different Arquillian container adapters.</li> <li>There are several Docker image definition file which prefix is Dockerfile., which is used to build the application into a Docker image.</li> <li>The docker-compose.yaml defines services to run GlassFish, WildFLy, OpenLiberty in docker container.</li> </ol>"},{"location":"gs/prerequisites/","title":"Prerequisites","text":"<p>To start development work, you have to prepare the development environment firstly. </p> <p>I assume you have installed the following software.</p> <ul> <li>Git</li> <li>JDK 17+</li> <li>The latest Apache Maven</li> <li>Your favorite text Editor or Java IDE</li> </ul>"},{"location":"gs/prerequisites/#git","title":"Git","text":"<p>For GNU Linux users, it is easy to get it installed via the Linux built-in repository.</p> <p>For Windows users, download Git, install it into your system. </p> <p>Alternatively, install it via <code>winget</code> command. Open Powershell with administrator role, run the following command to install Git.</p> <pre><code>winget install Git.Git\n</code></pre> <p>Some Git GUI tools such as TortoiseGit, GitHub Desktop, etc. provides friendly interactive GUI for developers, choose your favorite GUI tools yourself.</p> <p>Optionally install Github CLI if you prefer using command/shell instead of the GUI tools.</p>"},{"location":"gs/prerequisites/#jdk-17","title":"JDK 17","text":"<p>Although Jakarta EE 10 uses Java 11 as baseline, and also need to support Java 17. But it is highly recommended to use to the latest LTS version (currently it is Java 17) when you are starting a new project.</p> <p>There are several JDK redistributions available in these days, choose your favorite one from the following list. </p> <ul> <li>OpenJDK</li> <li>Oracle JDK</li> <li>Eclipse Temurin</li> <li>Zulu OpenJDK</li> <li>Microsoft OpenJDK</li> <li>BellSoft Liberica JDK</li> </ul> <p>Additionally, IBM, Amazon, Alibaba, RedHat have maintained their own Java redistributions. </p> <p>My preferred is Eclipse Temurin, which is evolved from the former AdoptOpenJDK and is a 100% community-support project.</p>"},{"location":"gs/prerequisites/#apache-maven","title":"Apache Maven","text":"<p>Download the latest Apache Maven, extract the files to you local machine.</p> <p>Define a new environment variable <code>MAVEN_HOME</code>, the value is the Maven installation location.</p> <p>Also append %MAVEN_HOME%/bin to your system PATH environment variable.</p>"},{"location":"gs/prerequisites/#an-editor-or-ide","title":"An Editor or IDE","text":"<p>A great editor or IDE will speed up your development productivity. Choose your favorite one from the following list.</p> <ul> <li>Visual Studio Code and Extension Pack for Java</li> <li>Intellij IDEA Community Edition(free)</li> <li>Apache NetBeans</li> <li>Eclipse IDE for Java EE Developers</li> </ul> <p>My preferred IDE is IntelliJ IDEA.</p>"},{"location":"test/","title":"Testing with Arquillian and JUnit 5","text":"<p>I have written a couple of posts to describe how to test Jakarta components with Arquillian container adapters before. </p> <p>If you are interested in the detailed configuration steps,  please go to the doc section of  Jakarta EE 8 Starter Boilerplate and Jakarta EE 9 Starter Boilerplate. </p> <p>In this new Jakarta EE 10 Starter Boilerplate project, I have ported the following Arquillian container adapters configuration with the latest application servers.</p> <ul> <li>GlassFish Managed Container</li> <li>GlassFish Remote Container</li> <li>WildFly Managed Container</li> <li>WildFly Remote Container</li> <li>OpenLiberty Managed Container</li> <li>OpenLiberty Remote Container</li> </ul>"},{"location":"test/#glassfish-managed-container","title":"GlassFish Managed Container","text":"<p>In this case,the test will manage the GlassFish container lifecycle, start, deploy, run test, undeploy, stop.</p> <p>Run the following command to run tests against a GlassFish managed container adapter.</p> <pre><code>mvn clean verify -Parq-glassfish-managed\n</code></pre>"},{"location":"test/#glassfish-remote-container","title":"GlassFish Remote Container","text":"<p>Make sure there is a running GlassFish server.</p> <p>Run the following command to run tests against a GlassFish remote container adapter.</p> <pre><code>mvn clean verify -Parq-glassfish-managed\n</code></pre>"},{"location":"test/#wildfly-managed-container","title":"WildFly Managed Container","text":"<p>Similarly run the following command to run tests against a WildFly managed container adapter.</p> <pre><code>mvn clean verify -Parq-wildfly-managed\n</code></pre>"},{"location":"test/#glassfish-remote-container_1","title":"GlassFish Remote Container","text":"<p>Make sure there is a running WildFly server.</p> <p>Execute the following command to add an administrator user.</p> <pre><code>&lt;WILDFLY_INSTALLDIR&gt;/bin/add-user.sh admin Admin@123 --silent\n</code></pre> <p>Then run the following command to run tests against a WildFly remote container adapter.</p> <pre><code>mvn clean verify -Parq-wildfly-managed\n</code></pre>"},{"location":"test/#openliberty-managed-container","title":"OpenLiberty Managed Container","text":"<p>There is a specific test/arq-liberty-managed/server.xml file prepared for the OpenLiberty managed container adapter. In the feature list, it adds extra <code>local-connector</code> and <code>usr:arquillian-support-jakarta-2.0</code> features for support connection to a local server.</p> <p>Similarly run the following command to run tests against a OpenLiberty managed container adapter.</p> <pre><code>mvn clean verify -Parq-liberty-managed\n</code></pre>"},{"location":"test/#openliberty-remote-container","title":"OpenLiberty Remote Container","text":"<p>Similarly there is a test/arq-liberty-remote/server.xml file prepared for the OpenLiberty remote container adapter. In the feature list, add a <code>rest-connector</code> to support connection via REST protocol to a running server.</p> <p>In the server.xml file, we also enabled SSL support, but the OpenLiberty generated security certificates are not recognized by client(the JVM to run tests), we need to extract cert file from OpenLiberty, and import into the client Java security folder. The detailed steps, please refer the doc Testing with Arquillian and OpenLiberty.</p> <p>Make sure the OpenLiberty is running.</p> <p>Run the following command to run tests against an OpenLiberty remote container adapter.</p> <pre><code>mvn clean verify -Parq-liberty-remote\n</code></pre>"}]}